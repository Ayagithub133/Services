@page "/User/chat/{Id}"
@using Microsoft.AspNetCore.SignalR.Client
@using Services.Shared.Data
@using System.Text.Json
@inject NavigationManager _navigationManager

<AuthorizeView>
    <Authorized>
        <div class="container-fluid" style="height:90%;border-radius:5px">

            <div class="row">

                <div class="col-12 mt-1 mb-4">
                    <div class="card">
                        <div class="card-body" dir="rtl">
                            <div style="width:100px;height:100px;border-radius:100%;margin-top:10px" class="img-thumbnail">

                                <img src="Uploads/user.png" style="width:100%;height:100%;border-radius:100%" />
                                @if (user.isActive)
                                {<div style="width:10px;height:10px;background-color:green;border-radius:100%"></div>}
                                else
                                { <div style="width:10px;height:10px;background-color:red;border-radius:100%"></div>}
                                <p style="text-align:center">@user.UserName</p>
                            </div>

                            <ul style="margin-top:60px;margin-bottom:100px;width:100%" class="list-unstyled ">
                                @foreach (var message in messagesHistory)
                                {
                                    if (message.FromUserId == Id)
                                    {
                                        <li style="padding:10px;float:left;width:100%">
                                            <p class="text-right" style="font-size:10px">@message.CreatedDate.ToShortTimeString()</p>
                                            <div class=" text-justify p-2" style="background-color:burlywood;color:white;border-radius:3px;display:inline-block;float:right" dir="rtl">
                                                @message.Message
                                            </div>
                                        </li>

                                    }
                                    else
                                    {

                                        <li style="padding:10px;float:right;width:100%">
                                            <p class="text-left" style="font-size:10px">@message.CreatedDate.ToShortTimeString()</p>
                                            <div class=" text-justify p-3 " style="background-color:brown;color:white;border-radius:3px;display:inline-block" dir="rtl">
                                                @message.Message
                                            </div>
                                        </li>
                                    }

                                }
                            </ul>
                            <ul id="messageList" class="list-unstyled ">
                                @foreach (var message in messages)
                                {
                                    if (message.FromUserId == Id)
                                    {
                                        <li style="padding:10px;float:left;width:100%">
                                            <p class="text-right" style="font-size:10px">@message.CreatedDate.ToShortTimeString()</p>
                                            <div class=" text-justify p-2" style="background-color:burlywood;color:white;border-radius:3px;display:inline-block;float:right" dir="rtl">
                                                @message.Message
                                            </div>
                                        </li>

                                    }
                                    else
                                    {

                                        <li style="padding:10px;float:right;width:100%">
                                            <p class="text-left" style="font-size:10px">@message.CreatedDate.ToShortTimeString()</p>
                                            <div class=" text-justify p-3 " style="background-color:brown;color:white;border-radius:3px;display:inline-block" dir="rtl">
                                                @message.Message
                                            </div>
                                        </li>
                                    }
                                }
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="col-12" style="height:140px"></div>
                <div class="col-12" style="position:fixed;bottom:45px">
                    <div class="form-group" style="width:100%">
                        <div class="input-group" style="width:100%">
                            <textarea @bind="@Message.Message" style="width:92%; height:100px;border-radius:10px;padding:5px"></textarea>
                            <button @onclick="Send" class="btn btn-info"> ارسال </button>
                        </div>
                    </div>
                </div>
            </div>




        </div>
    </Authorized>
    <NotAuthorized>                                                                                                                                                                                                            
        <Services.Client.Pages.User.Login></Services.Client.Pages.User.Login>
    </NotAuthorized>
    
</AuthorizeView>







@code
{

    [Parameter]
    public string Id { set; get; }

    HttpClient http = new HttpClient();
    private HubConnection hubConnection = null;
    private Messages Message = new Messages();
    public List<Messages> messagesHistory = new List<Messages>();
    private List<Messages> messages = new List<Messages>();

    private string messageInput;

    public UserChatDetails user = new UserChatDetails();



    protected override Task OnParametersSetAsync()
    {
        return base.OnParametersSetAsync();
    }


    protected override async Task OnInitializedAsync()
    {
        await getChatWith();
        await getMessages();
        hubConnection = new HubConnectionBuilder().WithUrl(_navigationManager.ToAbsoluteUri("/signalRHub")).Build();

        hubConnection.On<Messages>("ReceiveMessage", (msg) =>
        {


            messages.Add(msg);
            StateHasChanged();

        });

        await hubConnection.StartAsync();
        await hubConnection.InvokeAsync("connect");
    }

    async Task Send()
    {
        if (!IsConnected)
        { await hubConnection.StartAsync(); }
        Message.CreatedDate = DateTime.Now;
        Message.ToUserId = Id;
        await hubConnection.SendAsync("SendMessage", Message);
        await http.PostAsJsonAsync("https://localhost:44312/api/Chat/SendMessage", Message);
        Message.Message = "";
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async Task getMessages()
    {
        var response = await http.GetAsync($"https://localhost:44312/api/Chat/History?reciverId={Id}");
        var responseString = await response.Content.ReadAsStringAsync();
        messagesHistory = JsonSerializer.Deserialize<IEnumerable<Messages>>(responseString, new JsonSerializerOptions() { PropertyNameCaseInsensitive = true }).ToList();
    }

    public async Task getChatWith()
    {
        var response = await http.GetAsync($"https://localhost:44312/api/Chat/getChatWith?Id={Id}");
        var responseString = await response.Content.ReadAsStringAsync();
        user = JsonSerializer.Deserialize<UserChatDetails>(responseString , new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
    }

}
